// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	"github.com/dataleodev/registry/api"
	http1 "github.com/dataleodev/registry/api/http"
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
)

func createService(endpoints api.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"AddNode":        {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddNode", logger))},
		"AddRegion":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddRegion", logger))},
		"ChangePassword": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ChangePassword", logger))},
		"DeleteNode":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteNode", logger))},
		"GetNode":        {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetNode", logger))},
		"ListNodes":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ListNodes", logger))},
		"ListRegions":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ListRegions", logger))},
		"ListUsers":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ListUsers", logger))},
		"Login":          {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Login", logger))},
		"Register":       {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Register", logger))},
		"UpdateNode":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateNode", logger))},
		"UpdateUser":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateUser", logger))},
		"ViewUser":       {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "ViewUser", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["Register"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "Register")), api.InstrumentingMiddleware(duration.With("method", "Register"))}
	mw["Login"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "Login")), api.InstrumentingMiddleware(duration.With("method", "Login"))}
	mw["ViewUser"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "ViewUser")), api.InstrumentingMiddleware(duration.With("method", "ViewUser"))}
	mw["ListUsers"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "ListUsers")), api.InstrumentingMiddleware(duration.With("method", "ListUsers"))}
	mw["UpdateUser"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "UpdateUser")), api.InstrumentingMiddleware(duration.With("method", "UpdateUser"))}
	mw["ChangePassword"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "ChangePassword")), api.InstrumentingMiddleware(duration.With("method", "ChangePassword"))}
	mw["AddNode"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "AddNode")), api.InstrumentingMiddleware(duration.With("method", "AddNode"))}
	mw["GetNode"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "GetNode")), api.InstrumentingMiddleware(duration.With("method", "GetNode"))}
	mw["ListNodes"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "ListNodes")), api.InstrumentingMiddleware(duration.With("method", "ListNodes"))}
	mw["DeleteNode"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "DeleteNode")), api.InstrumentingMiddleware(duration.With("method", "DeleteNode"))}
	mw["UpdateNode"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "UpdateNode")), api.InstrumentingMiddleware(duration.With("method", "UpdateNode"))}
	mw["AddRegion"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "AddRegion")), api.InstrumentingMiddleware(duration.With("method", "AddRegion"))}
	mw["ListRegions"] = []endpoint1.Middleware{api.LoggingMiddleware(log.With(logger, "method", "ListRegions")), api.InstrumentingMiddleware(duration.With("method", "ListRegions"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []api.Middleware) []api.Middleware {
	return append(mw, api.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"Register", "Login", "ViewUser", "ListUsers", "UpdateUser", "ChangePassword", "AddNode", "GetNode", "ListNodes", "DeleteNode", "UpdateNode", "AddRegion", "ListRegions"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
