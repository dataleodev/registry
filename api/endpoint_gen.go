// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package api

import (
	"github.com/dataleodev/registry"
	endpoint "github.com/go-kit/kit/endpoint"
)

// NewServerEndpoints returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func MakeServerEndpoints(s registry.Service) Endpoints {
	return Endpoints{
		AuthThingEndpoint:      MakeAuthThingEndpoint(s),
		RegisterEndpoint:       MakeRegisterEndpoint(s),
		LoginEndpoint:          MakeLoginEndpoint(s),
		ViewUserEndpoint:       MakeViewUserEndpoint(s),
		ListUsersEndpoint:      MakeListUsersEndpoint(s),
		UpdateUserEndpoint:     MakeUpdateUserEndpoint(s),
		ChangePasswordEndpoint: MakeChangePasswordEndpoint(s),
		AddNodeEndpoint:        MakeAddNodeEndpoint(s),
		GetNodeEndpoint:        MakeGetNodeEndpoint(s),
		ListNodesEndpoint:      MakeListNodesEndpoint(s),
		DeleteNodeEndpoint:     MakeDeleteNodeEndpoint(s),
		UpdateNodeEndpoint:     MakeUpdateNodeEndpoint(s),
		AddRegionEndpoint:      MakeAddRegionEndpoint(s),
		ListRegionsEndpoint:    MakeListRegionsEndpoint(s),
	}

}

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	AuthThingEndpoint      endpoint.Endpoint
	RegisterEndpoint       endpoint.Endpoint
	LoginEndpoint          endpoint.Endpoint
	ViewUserEndpoint       endpoint.Endpoint
	ListUsersEndpoint      endpoint.Endpoint
	UpdateUserEndpoint     endpoint.Endpoint
	ChangePasswordEndpoint endpoint.Endpoint
	AddNodeEndpoint        endpoint.Endpoint
	GetNodeEndpoint        endpoint.Endpoint
	ListNodesEndpoint      endpoint.Endpoint
	DeleteNodeEndpoint     endpoint.Endpoint
	UpdateNodeEndpoint     endpoint.Endpoint
	AddRegionEndpoint      endpoint.Endpoint
	ListRegionsEndpoint    endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s registry.Service, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		AddNodeEndpoint:        MakeAddNodeEndpoint(s),
		AddRegionEndpoint:      MakeAddRegionEndpoint(s),
		ChangePasswordEndpoint: MakeChangePasswordEndpoint(s),
		DeleteNodeEndpoint:     MakeDeleteNodeEndpoint(s),
		GetNodeEndpoint:        MakeGetNodeEndpoint(s),
		ListNodesEndpoint:      MakeListNodesEndpoint(s),
		ListRegionsEndpoint:    MakeListRegionsEndpoint(s),
		ListUsersEndpoint:      MakeListUsersEndpoint(s),
		LoginEndpoint:          MakeLoginEndpoint(s),
		RegisterEndpoint:       MakeRegisterEndpoint(s),
		UpdateNodeEndpoint:     MakeUpdateNodeEndpoint(s),
		UpdateUserEndpoint:     MakeUpdateUserEndpoint(s),
		ViewUserEndpoint:       MakeViewUserEndpoint(s),
	}
	for _, m := range mdw["Register"] {
		eps.RegisterEndpoint = m(eps.RegisterEndpoint)
	}
	for _, m := range mdw["Login"] {
		eps.LoginEndpoint = m(eps.LoginEndpoint)
	}
	for _, m := range mdw["ViewUser"] {
		eps.ViewUserEndpoint = m(eps.ViewUserEndpoint)
	}
	for _, m := range mdw["ListUsers"] {
		eps.ListUsersEndpoint = m(eps.ListUsersEndpoint)
	}
	for _, m := range mdw["UpdateUser"] {
		eps.UpdateUserEndpoint = m(eps.UpdateUserEndpoint)
	}
	for _, m := range mdw["ChangePassword"] {
		eps.ChangePasswordEndpoint = m(eps.ChangePasswordEndpoint)
	}
	for _, m := range mdw["AddNode"] {
		eps.AddNodeEndpoint = m(eps.AddNodeEndpoint)
	}
	for _, m := range mdw["GetNode"] {
		eps.GetNodeEndpoint = m(eps.GetNodeEndpoint)
	}
	for _, m := range mdw["ListNodes"] {
		eps.ListNodesEndpoint = m(eps.ListNodesEndpoint)
	}
	for _, m := range mdw["DeleteNode"] {
		eps.DeleteNodeEndpoint = m(eps.DeleteNodeEndpoint)
	}
	for _, m := range mdw["UpdateNode"] {
		eps.UpdateNodeEndpoint = m(eps.UpdateNodeEndpoint)
	}
	for _, m := range mdw["AddRegion"] {
		eps.AddRegionEndpoint = m(eps.AddRegionEndpoint)
	}
	for _, m := range mdw["ListRegions"] {
		eps.ListRegionsEndpoint = m(eps.ListRegionsEndpoint)
	}
	return eps
}
